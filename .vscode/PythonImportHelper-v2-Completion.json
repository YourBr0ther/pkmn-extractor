[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "read_personality_value",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def read_personality_value(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        personality_value = int.from_bytes(file.read(4), byteorder='little')\n        return personality_value\ndef read_ot_id(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x04)\n        ot_id = int.from_bytes(file.read(4), byteorder='little')\n        return ot_id\ndef read_nickname_raw(pk3_file_path):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "read_ot_id",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def read_ot_id(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x04)\n        ot_id = int.from_bytes(file.read(4), byteorder='little')\n        return ot_id\ndef read_nickname_raw(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x08)\n        nickname_raw = file.read(10)\n        return nickname_raw",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "read_nickname_raw",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def read_nickname_raw(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x08)\n        nickname_raw = file.read(10)\n        return nickname_raw\ndef load_charmap(charmap_path):\n    charmap = {}\n    with open(charmap_path, mode='r', newline='') as csvfile:\n        reader = csv.DictReader(csvfile)\n        if 'Hex' not in reader.fieldnames or 'Char' not in reader.fieldnames:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "load_charmap",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def load_charmap(charmap_path):\n    charmap = {}\n    with open(charmap_path, mode='r', newline='') as csvfile:\n        reader = csv.DictReader(csvfile)\n        if 'Hex' not in reader.fieldnames or 'Char' not in reader.fieldnames:\n            raise ValueError(\"CSV file must contain 'Hex' and 'Char' columns\")\n        for row in reader:\n            try:\n                hex_value = int(row['Hex'], 16)\n                charmap[hex_value] = row['Char']",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "decode_nickname",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def decode_nickname(nickname_raw, charmap):\n    nickname = ''\n    for byte in nickname_raw:\n        if byte == 0x00 or byte not in charmap:  # Assuming 0x00 is the termination character\n            break\n        nickname += charmap.get(byte, '?')\n    return nickname\ndef read_language(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x12)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "read_language",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def read_language(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x12)\n        language_byte = int.from_bytes(file.read(1), byteorder='little')\n        language_map = {\n            1: 'Japanese',\n            2: 'English',\n            3: 'French',\n            4: 'Italian',\n            5: 'German',",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "read_misc_flags",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def read_misc_flags(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x13)\n        misc_flags_byte = int.from_bytes(file.read(1), byteorder='little')\n        flags = {\n            'Is Bad Egg': bool(misc_flags_byte & 0b00000001),\n            'Has Species': bool(misc_flags_byte & 0b00000010),\n            'Use Egg Name': bool(misc_flags_byte & 0b00000100),\n            'Block Box RS': bool(misc_flags_byte & 0b00001000),\n        }",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "read_ot_name",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def read_ot_name(pk3_file_path, charmap):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x14)\n        ot_name_raw = file.read(7)\n        ot_name = decode_nickname(ot_name_raw, charmap)\n        return ot_name\ndef read_markings(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x1B)\n        markings_byte = int.from_bytes(file.read(1), byteorder='little')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "read_markings",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def read_markings(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x1B)\n        markings_byte = int.from_bytes(file.read(1), byteorder='little')\n        markings = []\n        if markings_byte & 0b00000001:\n            markings.append('Circle')\n        if markings_byte & 0b00000010:\n            markings.append('Square')\n        if markings_byte & 0b00000100:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "read_level",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def read_level(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x54)\n        level_byte = int.from_bytes(file.read(1), byteorder='little')\n        return level_byte\ndef read_stat(pk3_file_path, offset):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(offset)\n        stat_value = int.from_bytes(file.read(2), byteorder='little')\n        return stat_value",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "read_stat",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def read_stat(pk3_file_path, offset):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(offset)\n        stat_value = int.from_bytes(file.read(2), byteorder='little')\n        return stat_value\ndef read_species(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x20)\n        species_value = int.from_bytes(file.read(2), byteorder='little')\n        return species_value",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "read_species",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def read_species(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x20)\n        species_value = int.from_bytes(file.read(2), byteorder='little')\n        return species_value\ndef read_item_held(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x22)\n        item_held_value = int.from_bytes(file.read(2), byteorder='little')\n        return item_held_value",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "read_item_held",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def read_item_held(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x22)\n        item_held_value = int.from_bytes(file.read(2), byteorder='little')\n        return item_held_value\ndef read_experience(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x24)\n        experience_value = int.from_bytes(file.read(4), byteorder='little')\n        return experience_value",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "read_experience",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def read_experience(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x24)\n        experience_value = int.from_bytes(file.read(4), byteorder='little')\n        return experience_value\ndef read_friendship(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x29)\n        friendship_value = int.from_bytes(file.read(1), byteorder='little')\n        return friendship_value",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "read_friendship",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def read_friendship(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x29)\n        friendship_value = int.from_bytes(file.read(1), byteorder='little')\n        return friendship_value\ndef read_move_set(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x2C)\n        moves = []\n        for _ in range(4):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "read_move_set",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def read_move_set(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x2C)\n        moves = []\n        for _ in range(4):\n            move_bytes = file.read(2)\n            move = move_bytes[0]  # Use only the first byte\n            moves.append(move)\n        return moves\ndef read_pp_values(pk3_file_path):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "read_pp_values",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def read_pp_values(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x34)\n        pp_values = []\n        for _ in range(4):\n            pp = int.from_bytes(file.read(1), byteorder='little')\n            pp_values.append(pp)\n        return pp_values\ndef read_ev_and_contest_stats(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "read_ev_and_contest_stats",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def read_ev_and_contest_stats(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x38)\n        ev_and_contest_stats = {\n            'HP EV': int.from_bytes(file.read(1), byteorder='little'),\n            'Attack EV': int.from_bytes(file.read(1), byteorder='little'),\n            'Defense EV': int.from_bytes(file.read(1), byteorder='little'),\n            'Speed EV': int.from_bytes(file.read(1), byteorder='little'),\n            'Sp. Attack EV': int.from_bytes(file.read(1), byteorder='little'),\n            'Sp. Defense EV': int.from_bytes(file.read(1), byteorder='little'),",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "read_pokerus_status",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def read_pokerus_status(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x44)  # Pokerus is at 0x44 (two bytes: 0x44 and 0x45)\n        pokerus_byte = int.from_bytes(file.read(1), byteorder='little')\n        days_left = pokerus_byte & 0b00001111  # Bits 0-3\n        strain = (pokerus_byte & 0b11110000) >> 4  # Bits 4-7\n        return {'Pokerus Days Left': days_left, 'Pokerus Strain': strain}\ndef read_met_location(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x45)  # Met Location is at 0x45",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "read_met_location",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def read_met_location(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x45)  # Met Location is at 0x45\n        met_location = int.from_bytes(file.read(1), byteorder='little')\n        return met_location\ndef read_origin_info(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x46)  # Origin Info is at 0x46-0x47\n        origin_info = int.from_bytes(file.read(2), byteorder='little')\n        gender = 'Female' if origin_info & (1 << 15) else 'Male'  # Bit 15",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "read_origin_info",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def read_origin_info(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x46)  # Origin Info is at 0x46-0x47\n        origin_info = int.from_bytes(file.read(2), byteorder='little')\n        gender = 'Female' if origin_info & (1 << 15) else 'Male'  # Bit 15\n        ball = (origin_info >> 11) & 0b1111  # Bits 11-14\n        game_of_origin = (origin_info >> 7) & 0b1111  # Bits 7-10\n        met_type = origin_info & 0b01111111  # Bits 0-6\n        return {\n            'Gender': gender,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "read_genetic_info",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def read_genetic_info(pk3_file_path):\n    with open(pk3_file_path, 'rb') as file:\n        file.seek(0x48)  # Genetic info is at 0x48-0x4B (4 bytes)\n        genetic_info = int.from_bytes(file.read(4), byteorder='little')\n        # Extracting individual components from the genetic info\n        hp_iv = genetic_info & 0b00000000000000000000000000011111  # Bits 0-4\n        attack_iv = (genetic_info >> 5) & 0b00000000000000000000000000011111  # Bits 5-9\n        defense_iv = (genetic_info >> 10) & 0b00000000000000000000000000011111  # Bits 10-14\n        speed_iv = (genetic_info >> 15) & 0b00000000000000000000000000011111  # Bits 15-19\n        sp_attack_iv = (genetic_info >> 20) & 0b00000000000000000000000000011111  # Bits 20-24",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_nature",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_nature(personality_value):\n    return personality_value % 25\ndef is_shiny(ot_id, personality_value):\n    tid = ot_id & 0xFFFF  # Lower 16 bits\n    sid = (ot_id >> 16) & 0xFFFF  # Upper 16 bits\n    tid_sid_xor = tid ^ sid\n    upper_half_personality = (personality_value >> 16) & 0xFFFF\n    lower_half_personality = personality_value & 0xFFFF\n    shiny_value = tid_sid_xor ^ upper_half_personality ^ lower_half_personality\n    return shiny_value < 8",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "is_shiny",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def is_shiny(ot_id, personality_value):\n    tid = ot_id & 0xFFFF  # Lower 16 bits\n    sid = (ot_id >> 16) & 0xFFFF  # Upper 16 bits\n    tid_sid_xor = tid ^ sid\n    upper_half_personality = (personality_value >> 16) & 0xFFFF\n    lower_half_personality = personality_value & 0xFFFF\n    shiny_value = tid_sid_xor ^ upper_half_personality ^ lower_half_personality\n    return shiny_value < 8\ndef format_pokemon_data(filename, data):\n    output = []",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "format_pokemon_data",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def format_pokemon_data(filename, data):\n    output = []\n    output.append(f\"=== {filename} ===\")\n    output.append(f\"General Info:\")\n    output.append(f\"  Personality Value: {data['Personality Value']}\")\n    output.append(f\"  Nature: {data['Nature']}, Is Shiny: {data['Is Shiny']}\")\n    output.append(f\"  Nickname: {data['Nickname']}\")\n    output.append(f\"  Language: {data['Language']}\")\n    output.append(f\"  Level: {data['Level']}\")\n    output.append(f\"  Experience: {data['Experience']}, Friendship: {data['Friendship']}\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "export_to_json",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def export_to_json(filename, data, output_dir):\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n    json_path = os.path.join(output_dir, f\"{filename}.json\")\n    with open(json_path, 'w') as json_file:\n        json.dump(data, json_file, indent=4)\ndef process_pk3_files(directory, charmap, output_dir):\n    for filename in os.listdir(directory):\n        if filename.endswith('.pk3'):\n            file_path = os.path.join(directory, filename)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "process_pk3_files",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def process_pk3_files(directory, charmap, output_dir):\n    for filename in os.listdir(directory):\n        if filename.endswith('.pk3'):\n            file_path = os.path.join(directory, filename)\n            personality_value = read_personality_value(file_path)\n            ot_id = read_ot_id(file_path)\n            nickname_raw = read_nickname_raw(file_path)\n            nickname = decode_nickname(nickname_raw, charmap)\n            language = read_language(file_path)\n            misc_flags = read_misc_flags(file_path)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "directory",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "directory = 'test_pokemon'\n# Specify the output directory for JSON files\noutput_dir = 'exported_pokemon'\n# Load the character map\ncharmap_path = 'charmap.csv'\ncharmap = load_charmap(charmap_path)\n# Process the files, print the formatted output, and export to JSON\nprocess_pk3_files(directory, charmap, output_dir)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "output_dir",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "output_dir = 'exported_pokemon'\n# Load the character map\ncharmap_path = 'charmap.csv'\ncharmap = load_charmap(charmap_path)\n# Process the files, print the formatted output, and export to JSON\nprocess_pk3_files(directory, charmap, output_dir)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "charmap_path",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "charmap_path = 'charmap.csv'\ncharmap = load_charmap(charmap_path)\n# Process the files, print the formatted output, and export to JSON\nprocess_pk3_files(directory, charmap, output_dir)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "charmap",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "charmap = load_charmap(charmap_path)\n# Process the files, print the formatted output, and export to JSON\nprocess_pk3_files(directory, charmap, output_dir)",
        "detail": "app",
        "documentation": {}
    }
]